/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module noise_9 (
    input clk,
    input rst,
    input enb,
    output reg [7:0] out_troj
  );
  
  
  
  wire [1-1:0] M_ro2_out;
  reg [1-1:0] M_ro2_enable;
  counter_12 ro2 (
    .clk(clk),
    .rst(rst),
    .enable(M_ro2_enable),
    .out(M_ro2_out)
  );
  wire [1-1:0] M_ro3_out;
  reg [1-1:0] M_ro3_enable;
  counter_12 ro3 (
    .clk(clk),
    .rst(rst),
    .enable(M_ro3_enable),
    .out(M_ro3_out)
  );
  wire [1-1:0] M_ro4_out;
  reg [1-1:0] M_ro4_enable;
  counter_12 ro4 (
    .clk(clk),
    .rst(rst),
    .enable(M_ro4_enable),
    .out(M_ro4_out)
  );
  wire [1-1:0] M_ro5_out;
  reg [1-1:0] M_ro5_enable;
  counter_12 ro5 (
    .clk(clk),
    .rst(rst),
    .enable(M_ro5_enable),
    .out(M_ro5_out)
  );
  wire [1-1:0] M_ro6_out;
  reg [1-1:0] M_ro6_enable;
  counter_12 ro6 (
    .clk(clk),
    .rst(rst),
    .enable(M_ro6_enable),
    .out(M_ro6_out)
  );
  wire [1-1:0] M_ro7_out;
  reg [1-1:0] M_ro7_enable;
  counter_12 ro7 (
    .clk(clk),
    .rst(rst),
    .enable(M_ro7_enable),
    .out(M_ro7_out)
  );
  wire [1-1:0] M_ro8_out;
  reg [1-1:0] M_ro8_enable;
  counter_12 ro8 (
    .clk(clk),
    .rst(rst),
    .enable(M_ro8_enable),
    .out(M_ro8_out)
  );
  wire [1-1:0] M_ro9_out;
  reg [1-1:0] M_ro9_enable;
  counter_12 ro9 (
    .clk(clk),
    .rst(rst),
    .enable(M_ro9_enable),
    .out(M_ro9_out)
  );
  
  wire [1-1:0] M_spliter_enb1;
  wire [1-1:0] M_spliter_enb2;
  wire [1-1:0] M_spliter_enb3;
  wire [1-1:0] M_spliter_enb4;
  wire [1-1:0] M_spliter_enb5;
  wire [1-1:0] M_spliter_enb6;
  wire [1-1:0] M_spliter_enb7;
  wire [1-1:0] M_spliter_enb8;
  reg [1-1:0] M_spliter_enb;
  enb_spliter_13 spliter (
    .enb(M_spliter_enb),
    .enb1(M_spliter_enb1),
    .enb2(M_spliter_enb2),
    .enb3(M_spliter_enb3),
    .enb4(M_spliter_enb4),
    .enb5(M_spliter_enb5),
    .enb6(M_spliter_enb6),
    .enb7(M_spliter_enb7),
    .enb8(M_spliter_enb8)
  );
  
  always @* begin
    M_spliter_enb = enb;
    M_ro2_enable = M_spliter_enb1;
    M_ro3_enable = M_spliter_enb2;
    M_ro4_enable = M_spliter_enb3;
    M_ro5_enable = M_spliter_enb4;
    M_ro6_enable = M_spliter_enb5;
    M_ro7_enable = M_spliter_enb6;
    M_ro8_enable = M_spliter_enb7;
    M_ro9_enable = M_spliter_enb8;
    out_troj[0+0-:1] = M_ro2_out;
    out_troj[1+0-:1] = M_ro3_out;
    out_troj[2+0-:1] = M_ro4_out;
    out_troj[3+0-:1] = M_ro5_out;
    out_troj[4+0-:1] = M_ro6_out;
    out_troj[5+0-:1] = M_ro7_out;
    out_troj[6+0-:1] = M_ro8_out;
    out_troj[7+0-:1] = M_ro9_out;
  end
endmodule
