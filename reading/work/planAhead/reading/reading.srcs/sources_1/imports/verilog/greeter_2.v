/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module greeter_2 (
    input clk,
    input rst,
    input new_rx,
    input [7:0] rx_data,
    output reg new_tx,
    output reg [7:0] tx_data,
    input tx_busy,
    output reg [7:0] tj
  );
  
  
  
  localparam PROMPT_TEXT = 288'h68746977203d20746e45202c64696d203d2068203b6a6f7274206f6e203d20796e410a0d;
  
  localparam IDLE_state = 3'd0;
  localparam PROMPT_state = 3'd1;
  localparam LISTEN_state = 3'd2;
  localparam SAMPLING_state = 3'd3;
  localparam TRANSMITTING_state = 3'd4;
  
  reg [2:0] M_state_d, M_state_q = IDLE_state;
  localparam RST_state2 = 2'd0;
  localparam WAIT_state2 = 2'd1;
  localparam WRITE_state2 = 2'd2;
  
  reg [1:0] M_state2_d, M_state2_q = RST_state2;
  localparam READ_state3 = 2'd0;
  localparam T_NUM1_state3 = 2'd1;
  localparam T_NUM2_state3 = 2'd2;
  localparam T_NUM3_state3 = 2'd3;
  
  reg [1:0] M_state3_d, M_state3_q = READ_state3;
  reg [5:0] M_prompt_count_d, M_prompt_count_q = 1'h0;
  reg [10:0] M_name_count_d, M_name_count_q = 1'h0;
  reg [7:0] M_waiting_d, M_waiting_q = 1'h0;
  reg [7:0] M_county_d, M_county_q = 1'h0;
  reg [23:0] M_tmp_d, M_tmp_q = 1'h0;
  reg [7:0] M_dikoy_d, M_dikoy_q = 1'h0;
  reg M_trj_d, M_trj_q = 1'h0;
  reg M_sn1_d, M_sn1_q = 1'h0;
  reg M_sn2_d, M_sn2_q = 1'h0;
  reg M_sn1_rst_d, M_sn1_rst_q = 1'h0;
  reg M_sn2_rst_d, M_sn2_rst_q = 1'h0;
  reg M_who_d, M_who_q = 1'h0;
  wire [24-1:0] M_ram_read_data;
  reg [11-1:0] M_ram_address;
  reg [24-1:0] M_ram_write_data;
  reg [1-1:0] M_ram_write_en;
  simple_ram_7 #(.SIZE(5'h18), .DEPTH(11'h7d0)) ram (
    .clk(clk),
    .address(M_ram_address),
    .write_data(M_ram_write_data),
    .write_en(M_ram_write_en),
    .read_data(M_ram_read_data)
  );
  wire [24-1:0] M_ram2_read_data;
  reg [11-1:0] M_ram2_address;
  reg [24-1:0] M_ram2_write_data;
  reg [1-1:0] M_ram2_write_en;
  simple_ram_7 #(.SIZE(5'h18), .DEPTH(11'h7d0)) ram2 (
    .clk(clk),
    .address(M_ram2_address),
    .write_data(M_ram2_write_data),
    .write_en(M_ram2_write_en),
    .read_data(M_ram2_read_data)
  );
  
  wire [1-1:0] M_sen_out;
  wire [1-1:0] M_sen_out2;
  reg [1-1:0] M_sen_enb1;
  reg [1-1:0] M_sen_enb2;
  sensor_8 sen (
    .enb1(M_sen_enb1),
    .enb2(M_sen_enb2),
    .out(M_sen_out),
    .out2(M_sen_out2)
  );
  
  wire [8-1:0] M_ns_out_troj;
  reg [1-1:0] M_ns_enb;
  noise_9 ns (
    .clk(clk),
    .rst(rst),
    .enb(M_ns_enb),
    .out_troj(M_ns_out_troj)
  );
  
  wire [24-1:0] M_cache_out_uno;
  wire [24-1:0] M_cache_out_dos;
  reg [1-1:0] M_cache_clk_uno;
  reg [1-1:0] M_cache_clk_dos;
  reg [1-1:0] M_cache_rst_uno;
  reg [1-1:0] M_cache_rst_dos;
  mem_quick_10 cache (
    .clk_uno(M_cache_clk_uno),
    .clk_dos(M_cache_clk_dos),
    .rst_uno(M_cache_rst_uno),
    .rst_dos(M_cache_rst_dos),
    .out_uno(M_cache_out_uno),
    .out_dos(M_cache_out_dos)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_state2_d = M_state2_q;
    M_state3_d = M_state3_q;
    M_prompt_count_d = M_prompt_count_q;
    M_dikoy_d = M_dikoy_q;
    M_sn2_rst_d = M_sn2_rst_q;
    M_waiting_d = M_waiting_q;
    M_sn2_d = M_sn2_q;
    M_tmp_d = M_tmp_q;
    M_sn1_d = M_sn1_q;
    M_county_d = M_county_q;
    M_sn1_rst_d = M_sn1_rst_q;
    M_trj_d = M_trj_q;
    M_name_count_d = M_name_count_q;
    M_who_d = M_who_q;
    
    M_cache_rst_uno = M_sn1_rst_q;
    M_cache_rst_dos = M_sn2_rst_q;
    M_cache_clk_uno = M_sen_out;
    M_cache_clk_dos = M_sen_out2;
    M_ram_address = M_name_count_q;
    M_ram_write_data = M_cache_out_uno;
    M_ram_write_en = 1'h0;
    M_ram2_address = M_name_count_q;
    M_ram2_write_data = M_cache_out_dos;
    M_ram2_write_en = 1'h0;
    M_sen_enb1 = M_sn1_q;
    M_sen_enb2 = M_sn2_q;
    M_sn1_rst_d = 1'h0;
    M_sn2_rst_d = 1'h0;
    M_ns_enb = M_trj_q;
    tj = M_dikoy_q;
    new_tx = 1'h0;
    tx_data = 8'bxxxxxxxx;
    
    case (M_state_q)
      IDLE_state: begin
        M_prompt_count_d = 1'h0;
        M_trj_d = 1'h0;
        if (new_rx) begin
          M_state_d = PROMPT_state;
          M_county_d = 1'h0;
        end
      end
      PROMPT_state: begin
        if (!tx_busy) begin
          M_prompt_count_d = M_prompt_count_q + 1'h1;
          new_tx = 1'h1;
          tx_data = PROMPT_TEXT[(M_prompt_count_q)*8+7-:8];
          if (M_prompt_count_q == 7'h23) begin
            M_state_d = LISTEN_state;
          end
        end
      end
      LISTEN_state: begin
        if (new_rx) begin
          if (rx_data == 4'ha || rx_data == 4'hd || rx_data == 7'h68) begin
            M_trj_d = 1'h1;
          end
          M_state_d = SAMPLING_state;
          M_sn1_d = 1'h1;
          M_sn2_d = 1'h1;
          M_who_d = 1'h0;
          M_state2_d = RST_state2;
          M_name_count_d = 11'h000;
        end
      end
      SAMPLING_state: begin
        
        case (M_state2_q)
          RST_state2: begin
            M_name_count_d = M_name_count_q + 1'h1;
            M_sn1_rst_d = 1'h1;
            M_sn2_rst_d = 1'h1;
            M_state2_d = WAIT_state2;
          end
          WAIT_state2: begin
            if (M_waiting_q[2+0-:1] == 1'h1) begin
              M_waiting_d = 1'h0;
              M_state2_d = WRITE_state2;
            end else begin
              M_waiting_d = M_waiting_q + 1'h1;
            end
          end
          WRITE_state2: begin
            M_ram_write_en = 1'h1;
            M_ram2_write_en = 1'h1;
            M_state2_d = RST_state2;
            if (M_name_count_q >= 11'h7cf) begin
              M_state_d = TRANSMITTING_state;
              M_state3_d = READ_state3;
              M_name_count_d = 11'h001;
            end
          end
        endcase
      end
      TRANSMITTING_state: begin
        if (!tx_busy) begin
          if (M_name_count_q < 11'h7d0) begin
            
            case (M_state3_q)
              READ_state3: begin
                if (M_who_q == 1'h0) begin
                  M_tmp_d = M_ram_read_data;
                end else begin
                  M_tmp_d = M_ram2_read_data;
                end
                M_state3_d = T_NUM1_state3;
              end
              T_NUM1_state3: begin
                new_tx = 1'h1;
                tx_data = M_tmp_q[16+7-:8];
                M_state3_d = T_NUM2_state3;
              end
              T_NUM2_state3: begin
                new_tx = 1'h1;
                tx_data = M_tmp_q[8+7-:8];
                M_state3_d = T_NUM3_state3;
              end
              T_NUM3_state3: begin
                new_tx = 1'h1;
                tx_data = M_tmp_q[0+7-:8];
                M_state3_d = READ_state3;
                if (M_who_q == 1'h0) begin
                  M_who_d = 1'h1;
                end else begin
                  M_name_count_d = M_name_count_q + 1'h1;
                  M_who_d = 1'h0;
                end
              end
            endcase
          end else begin
            if (M_county_q < 8'h0a) begin
              M_county_d = M_county_q + 1'h1;
              M_name_count_d = 11'h000;
              M_dikoy_d = M_ns_out_troj;
              M_state_d = SAMPLING_state;
            end else begin
              M_sn1_d = 1'h0;
              M_sn2_d = 1'h0;
              M_trj_d = 1'h0;
              M_state_d = IDLE_state;
            end
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_prompt_count_q <= M_prompt_count_d;
    M_name_count_q <= M_name_count_d;
    M_waiting_q <= M_waiting_d;
    M_county_q <= M_county_d;
    M_tmp_q <= M_tmp_d;
    M_dikoy_q <= M_dikoy_d;
    M_trj_q <= M_trj_d;
    M_sn1_q <= M_sn1_d;
    M_sn2_q <= M_sn2_d;
    M_sn1_rst_q <= M_sn1_rst_d;
    M_sn2_rst_q <= M_sn2_rst_d;
    M_who_q <= M_who_d;
    
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
      M_state2_q <= 1'h0;
      M_state3_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
      M_state2_q <= M_state2_d;
      M_state3_q <= M_state3_d;
    end
  end
  
endmodule
